from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
)
from sqlalchemy import select, func, desc
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.enums import TicketStatus
from app.db.models import Ticket, Message as TicketMessage
from app.filters.admin import IsAdminCallback, IsAdminMessage
from app.keyboards.admin import all_tickets_keyboard, one_ticket_keyboard

router = Router()

router.message.filter(IsAdminMessage())
router.callback_query.filter(IsAdminCallback())


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message, session: AsyncSession):
    total_tickets = await session.scalar(select(func.count(Ticket.id)))
    open_tickets = await session.scalar(
        select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.open)
    )
    closed_tickets = await session.scalar(
        select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.closed)
    )
    in_progress_tickets = await session.scalar(
        select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.in_progress)
    )

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:

üì® –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {total_tickets}
üîì –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}
üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_tickets}
üîí –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets}
"""
    await message.answer(stats_text)


@router.message(F.text == "üìã –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def show_all_tickets(message: Message, session: AsyncSession):
    result = await session.execute(
        select(Ticket).order_by(desc(Ticket.created_at)).limit(50)
    )
    tickets = result.scalars().all()

    if not tickets:
        await message.answer("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        return

    await message.answer(
        f"üìã –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è ({len(tickets)}):",
        reply_markup=all_tickets_keyboard(tickets),
    )


@router.callback_query(F.data.startswith("filter_"))
async def filter_tickets(callback: CallbackQuery, session: AsyncSession):
    filter_type = callback.data.split("_", 1)[1]

    if filter_type == "all":
        result = await session.execute(
            select(Ticket).order_by(desc(Ticket.created_at)).limit(50)
        )
    else:
        result = await session.execute(
            select(Ticket)
            .where(Ticket.status == filter_type)
            .order_by(desc(Ticket.created_at))
            .limit(50)
        )

    tickets = result.scalars().all()

    if not tickets:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º.")
        await callback.answer()
        return

    filter_name = "–≤—Å–µ" if filter_type == "all" else filter_type
    await callback.message.edit_text(
        f"üìã –û–±—Ä–∞—â–µ–Ω–∏—è ({filter_name}): {len(tickets)}",
        reply_markup=all_tickets_keyboard(tickets),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_view_ticket_"))
async def admin_view_ticket_details(callback: CallbackQuery, session: AsyncSession):
    ticket_id = int(callback.data.split("_")[3])

    ticket = await session.get(Ticket, ticket_id)
    if not ticket:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    result = await session.execute(
        select(TicketMessage)
        .where(TicketMessage.ticket_id == ticket_id)
        .order_by(TicketMessage.created_at.asc())
    )
    messages = result.scalars().all()

    status_emoji = (
        "üîì"
        if ticket.status == TicketStatus.open
        else "üîÑ"
        if ticket.status == TicketStatus.in_progress
        else "üîí"
    )
    username = (
        f"@{ticket.username}"
        if ticket.username
        else f"{ticket.first_name or ''} {ticket.last_name or ''}".strip()
    )

    text = f"{status_emoji} –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}\n"
    text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {ticket.user_id})\n"
    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {ticket.status}\n\n"
    text += "üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞:\n\n"

    for msg in messages:
        sender = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.is_from_user else "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        text += f"{sender} ({msg.created_at.strftime('%H:%M')}):\n{msg.text}\n\n"

    await callback.message.edit_text(text, reply_markup=one_ticket_keyboard(ticket))
    await callback.answer()


@router.callback_query(F.data == "admin_back_to_list")
async def admin_back_to_tickets_list(callback: CallbackQuery, session: AsyncSession):
    await show_all_tickets(callback.message, session)
    await callback.answer()


@router.callback_query(F.data.startswith("take_"))
async def take_ticket(callback: CallbackQuery, session: AsyncSession):
    ticket_id = int(callback.data.split("_")[1])

    ticket = await session.get(Ticket, ticket_id)
    if not ticket or ticket.status != "open":
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É!")
        return

    ticket.status = TicketStatus.in_progress
    await session.commit()

    try:
        await callback.bot.send_message(
            ticket.user_id,
            f"üîÑ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id} –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        )
    except Exception:
        pass

    await callback.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É!")

    await admin_view_ticket_details(callback, session)


@router.callback_query(F.data.startswith("reopen_"))
async def reopen_ticket(callback: CallbackQuery, session: AsyncSession):
    ticket_id = int(callback.data.split("_")[1])

    ticket = await session.get(Ticket, ticket_id)
    if not ticket or ticket.status != "in_progress":
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ!")
        return

    ticket.status = TicketStatus.open
    await session.commit()

    await callback.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ!")
    await admin_view_ticket_details(callback, session)
